<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-04-18 at 12:37:49.
 */
include '../dataSource.php';
class dataSourceTest extends PHPUnit_Framework_TestCase {

    /**
     * @var dataSource
     */
    protected $object;
   

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new dataSource;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    
    public function testEmployeeClass(){
        $testEmployee = new Employee(1, "Mike", "Heerwagen");
        $this->AssertEquals(1,$testEmployee->getEmployeeId());
        $testEmployee->setEmployeeId(2);
        $this->AssertEquals(2,$testEmployee->getEmployeeId());
        $this->AssertEquals("Mike", $testEmployee->getFirstname());
        $testEmployee->setFirstname("Thomas");
        $this->AssertEquals("Thomas", $testEmployee->getFirstname());
        $this->AssertEquals("Heerwagen", $testEmployee->getLastname());
        $testEmployee->setLastname("Thom Thom");
        $this->AssertEquals("Thom Thom", $testEmployee->getLastname());
    }
    public function testCloseConnection(){
        $connection = new Connection();
        $conn = $this->object->getConnection();
        $connection->closeConnection($conn);
    }
    public function testNFCClass(){
        $testNFC = new NFC(false, "Lyngby", "nu", "Test");
        $this->AssertEquals(false, $testNFC->getRangeCheck());
        $testNFC->setRangeCheck(true);
        $this->AssertEquals(true, $testNFC->getRangeCheck());
        $this->AssertEquals("Lyngby", $testNFC->getTagAddress());
        $testNFC->setTagAddress("Farum St.");
        $this->AssertEquals("Farum St.", $testNFC->getTagAddress());
        $this->AssertEquals("nu", $testNFC->getTime());
        $testNFC->setTime("herognu");
        $this->AssertEquals("herognu", $testNFC->getTime());
        $this->AssertEquals("Test", $testNFC->getEmployee());
        $testNFC->setUser("Mike");
        $this->AssertEquals("Mike", $testNFC->getEmployee());
        
        
    }
    
    /**
     * @covers dataSource::getEmployee
     * @todo   Implement testgetEmployee().
     */
    public function testgetEmployee() {
        // Remove the following lines when you implement this test.
        
        $testUser = new Employee(1, "Thomas", "Kragsberger");
        $actualresult = $this->object->getEmployee(1);
        $this->assertEquals($testUser, $actualresult);
    }

    /**
     * @covers dataSource::getCustomer
     * @todo   Implement testGetCustomer().
     */
    public function testGetCustomer() {
        // Remove the following lines when you implement this test.
        $testCustomer = new customer("Thomas Kragsberger", 1, "BybÃ¦kterrasserne 137 D", 3520, "Farum", 27708834);
        $actualresult = $this->object->getCustomer(1);
        $this->assertEquals($testCustomer, $actualresult);
        
    }

    /**
     * @covers dataSource::createAlarmReport
     * @todo   Implement testCreateAlarmReport().
     */
    public function testCreateAlarmReportFullAlarmRerport() {
        // Remove the following lines when you implement this test.
        $testAlarmReport = new alarmReport("test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test");
        $actualresult = $this->object->createAlarmReport($testAlarmReport);
        $this->assertEquals($testAlarmReport, $actualresult);
        
        
    }
    public function testCreateAlarmReportMissingRows(){
        $testAlarmReport = new alarmReport(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
        $actualResult = $this->object->createAlarmReport($testAlarmReport);
        $this->assertEquals($testAlarmReport, $actualResult);
                 
    }

    public function testCreateAlarmReportCustomerName(){
        $testAlarmReport = new alarmReport("Thomas", 1000, "farum", 2200, "Farum", 22250898, '2016-02-15', '12:41:54', "zone 4", true, false, true, false, true, false, false, true, "ib", false, '12:54:24', false, "tomstring", "thomthom", "1", "2", "3", '2016-02-15', '23:14:24', '14:12:13','15:23:50','15:23:50',2);
        $actualResult = $this->object->createAlarmReport($testAlarmReport);
        $this->assertEquals("Thomas",$actualResult->getCustomerName());
        
        
    }
    public function testCreateAlarmReportCustomerNumber(){
        $testAlarmReport = new alarmReport("Thomas", 1000, "farum", 2200, "Farum", 22250898, '2016-02-15', '12:41:54', "zone 4", true, false, true, false, true, false, false, true, "ib", false, '12:54:24', false, "tomstring", "thomthom", "1", "2", "3", '2016-02-15', '23:14:24', '14:12:13','15:23:50','15:23:50',2);
        $actualReulst = $this->object->createAlarmReport($testAlarmReport);
        $this->assertEquals(3, $actualReulst->getCustomerNumber());
        
        
    }
      public function testCreateAlarmReportStreetAndHouseNumber(){
        $testAlarmReport = new alarmReport("Thomas", 1000, "farum", 2200, "Farum", 22250898, '2016-02-15', '12:41:54', "zone 4", true, false, true, false, true, false, false, true, "ib", false, '12:54:24', false, "tomstring", "thomthom", "1", "2", "3", '2016-02-15', '23:14:24', '14:12:13','15:23:50','15:23:50',2);
        $actualReulst = $this->object->createAlarmReport($testAlarmReport);
        $this->assertEquals("Farum Stationsvej 2", $actualReulst->getStreetAndHouseNumber());
        
        
    }
       public function testCreateAlarmReportZipCode(){
        $testAlarmReport = new alarmReport("Thomas", 1000, "farum", 2200, "Farum", 22250898, '2016-02-15', '12:41:54', "zone 4", true, false, true, false, true, false, false, true, "ib", false, '12:54:24', false, "tomstring", "thomthom", "1", "2", "3", '2016-02-15', '23:14:24', '14:12:13','15:23:50','15:23:50',2);
        $actualReulst = $this->object->createAlarmReport($testAlarmReport);
        $this->assertEquals(2860, $actualReulst->getZipCode());
        
        
    }   public function testCreateAlarmReportCity(){
        $testAlarmReport = new alarmReport("Thomas", 1000, "farum", 2200, "Farum", 22250898, '2016-02-15', '12:41:54', "zone 4", true, false, true, false, true, false, false, true, "ib", false, '12:54:24', false, "tomstring", "thomthom", "1", "2", "3", '2016-02-15', '23:14:24', '14:12:13','15:23:50','15:23:50',2);
        $actualReulst = $this->object->createAlarmReport($testAlarmReport);
        $this->assertEquals("Kgs. Lyngby", $actualReulst->getCity());
        
        
    }
       public function testCreateAlarmReportPhoneNumber(){
        $testAlarmReport = new alarmReport("Thomas", 1000, "farum", 2200, "Farum", 22250898, '2016-02-15', '12:41:54', "zone 4", true, false, true, false, true, false, false, true, "ib", false, '12:54:24', false, "tomstring", "thomthom", "1", "2", "3", '2016-02-15', '23:14:24', '14:12:13','15:23:50','15:23:50',2);
        $actualReulst = $this->object->createAlarmReport($testAlarmReport);
        $this->assertEquals(22250898, $actualReulst->getPhoneNumber());
        
        
    }   
    public function testCreateAlarmReportDate(){
        $testTime = new DateTime('18-04-2016');
        $testAlarmReport = new alarmReport("Thomas", 1000, "farum", 2200, "Farum", 22250898, '2016-02-15', '12:41:54', "zone 4", true, false, true, false, true, false, false, true, "ib", false, '12:54:24', false, "tomstring", "thomthom", "1", "2", "3", '2016-02-15', '23:14:24', '14:12:13','15:23:50','15:23:50',2);        
        $actualReulst = $this->object->createAlarmReport($testAlarmReport);
        $this->assertEquals($testTime, $actualReulst->getDate());
        
        
    } public function testCreateAlarmReportTime(){
         $testTime = new DateTime('14:08:04');
        $testAlarmReport = new alarmReport("Thomas", 1000, "farum", 2200, "Farum", 22250898, '2016-02-15', '12:41:54', "zone 4", true, false, true, false, true, false, false, true, "ib", false, '12:54:24', false, "tomstring", "thomthom", "1", "2", "3", '2016-02-15', '23:14:24', '14:12:13','15:23:50','15:23:50',2);
        $actualReulst = $this->object->createAlarmReport($testAlarmReport);
        $this->assertEquals($testTime, $actualReulst->getTime());
        
        
    }public function testCreateAlarmReportZone(){
        $testAlarmReport = new alarmReport("Thomas", 1000, "farum", 2200, "Farum", 22250898, '2016-02-15', '12:41:54', "zone 4", true, false, true, false, true, false, false, true, "ib", false, '12:54:24', false, "tomstring", "thomthom", "1", "2", "3", '2016-02-15', '23:14:24', '14:12:13','15:23:50','15:23:50',2);
        $actualReulst = $this->object->createAlarmReport($testAlarmReport);
        $this->assertEquals("Zone 4", $actualReulst->getZone());
        
        
    }public function testCreateAlarmReportBurglaryVandalism(){
        $testAlarmReport = new alarmReport("Thomas", 1000, "farum", 2200, "Farum", 22250898, '2016-02-15', '12:41:54', "zone 4", true, false, true, false, true, false, false, true, "ib", false, '12:54:24', false, "tomstring", "thomthom", "1", "2", "3", '2016-02-15', '23:14:24', '14:12:13','15:23:50','15:23:50',2);
        $actualReulst = $this->object->createAlarmReport($testAlarmReport);
        $this->assertEquals(true, $actualReulst->getBurglaryVandalism());
        
        
    }public function testCreateAlarmReportWindowDoorClosed(){
        $testAlarmReport = new alarmReport("Thomas", 1000, "farum", 2200, "Farum", 22250898, '2016-02-15', '12:41:54', "zone 4", true, false, true, false, true, false, false, true, "ib", false, '12:54:24', false, "tomstring", "thomthom", "1", "2", "3", '2016-02-15', '23:14:24', '14:12:13','15:23:50','15:23:50',2);
        $actualReulst = $this->object->createAlarmReport($testAlarmReport);
        $this->assertEquals(true, $actualReulst->getWindowDoorClosed());
        
        
    }public function testCreateAlarmReportApprehendedPerson(){
        $testAlarmReport = new alarmReport("Thomas", 1000, "farum", 2200, "Farum", 22250898, '2016-02-15', '12:41:54', "zone 4", true, false, true, false, true, false, false, true, "ib", false, '12:54:24', false, "tomstring", "thomthom", "1", "2", "3", '2016-02-15', '23:14:24', '14:12:13','15:23:50','15:23:50',2);
        $actualReulst = $this->object->createAlarmReport($testAlarmReport);
        $this->assertEquals(true, $actualReulst->getApprehendedPerson());
        
        
    }public function testCreateAlarmReportStaffError(){
        $testAlarmReport = new alarmReport("Thomas", 1000, "farum", 2200, "Farum", 22250898, '2016-02-15', '12:41:54', "zone 4", true, false, true, false, true, false, false, true, "ib", false, '12:54:24', false, "tomstring", "thomthom", "1", "2", "3", '2016-02-15', '23:14:24', '14:12:13','15:23:50','15:23:50',2);
        $actualReulst = $this->object->createAlarmReport($testAlarmReport);
        $this->assertEquals(true, $actualReulst->getStaffError());
        
        
    }public function testCreateAlarmReportNothingToReport(){
        $testAlarmReport = new alarmReport("Thomas", 1000, "farum", 2200, "Farum", 22250898, '2016-02-15', '12:41:54', "zone 4", true, false, true, false, true, false, false, true, "ib", false, '12:54:24', false, "tomstring", "thomthom", "1", "2", "3", '2016-02-15', '23:14:24', '14:12:13','15:23:50','15:23:50',2);
        $actualReulst = $this->object->createAlarmReport($testAlarmReport);
        $this->assertEquals(true, $actualReulst->getNothingToReport());
        
        
    }public function testCreateAlarmReportTechnicalError(){
        $testAlarmReport = new alarmReport("Thomas", 1000, "farum", 2200, "Farum", 22250898, '2016-02-15', '12:41:54', "zone 4", true, false, true, false, true, false, false, true, "ib", false, '12:54:24', false, "tomstring", "thomthom", "1", "2", "3", '2016-02-15', '23:14:24', '14:12:13','15:23:50','15:23:50',2);
        $actualReulst = $this->object->createAlarmReport($testAlarmReport);
        $this->assertEquals(true, $actualReulst->getTechnicalError());
        
        
    }public function testCreateAlarmReportUnknownReason(){
        $testAlarmReport = new alarmReport("Thomas", 1000, "farum", 2200, "Farum", 22250898, '2016-02-15', '12:41:54', "zone 4", true, false, true, false, true, false, false, true, "ib", false, '12:54:24', false, "tomstring", "thomthom", "1", "2", "3", '2016-02-15', '23:14:24', '14:12:13','15:23:50','15:23:50',2);
        $actualReulst = $this->object->createAlarmReport($testAlarmReport);
        $this->assertEquals(true, $actualReulst->getUnknownReason());
        
        
    }public function testCreateAlarmReportOther(){
        $testAlarmReport = new alarmReport("Thomas", 1000, "farum", 2200, "Farum", 22250898, '2016-02-15', '12:41:54', "zone 4", true, false, true, false, true, false, false, true, "ib", false, '12:54:24', false, "tomstring", "thomthom", "1", "2", "3", '2016-02-15', '23:14:24', '14:12:13','15:23:50','15:23:50',2);
        $actualReulst = $this->object->createAlarmReport($testAlarmReport);
        $this->assertEquals(true, $actualReulst->getOther());
        
        
    }public function testCreateAlarmReportCancelDuringEmergency(){
        $testAlarmReport = new alarmReport("Thomas", 1000, "farum", 2200, "Farum", 22250898, '2016-02-15', '12:41:54', "zone 4", true, false, true, false, true, false, false, true, "ib", false, '12:54:24', false, "tomstring", "thomthom", "1", "2", "3", '2016-02-15', '23:14:24', '14:12:13','15:23:50','15:23:50',2);
        $actualReulst = $this->object->createAlarmReport($testAlarmReport);
        $this->assertEquals(true, $actualReulst->getCancelDuringEmergency());
        
        
    }public function testCreateAlarmReportCoverMade(){
        $testAlarmReport = new alarmReport("Thomas", 1000, "farum", 2200, "Farum", 22250898, '2016-02-15', '12:41:54', "zone 4", true, false, true, false, true, false, false, true, "ib", false, '12:54:24', false, "tomstring", "thomthom", "1", "2", "3", '2016-02-15', '23:14:24', '14:12:13','15:23:50','15:23:50',2);
        $actualReulst = $this->object->createAlarmReport($testAlarmReport);
        $this->assertEquals(true, $actualReulst->getCoverMade());
        
        
    }public function testCreateAlarmReportRemark(){
        $testAlarmReport = new alarmReport("Thomas", 1000, "farum", 2200, "Farum", 22250898, '2016-02-15', '12:41:54', "zone 4", true, false, true, false, true, false, false, true, "ib", false, '12:54:24', false, "tomstring", "thomthom", "1", "2", "3", '2016-02-15', '23:14:24', '14:12:13','15:23:50','15:23:50',2);
        $actualReulst = $this->object->createAlarmReport($testAlarmReport);
        $this->assertEquals("Intet at bemÃ¦rke", $actualReulst->getRemark());
        
        
    }public function testCreateAlarmReportName(){
        $testAlarmReport = new alarmReport("Thomas", 1000, "farum", 2200, "Farum", 22250898, '2016-02-15', '12:41:54', "zone 4", true, false, true, false, true, false, false, true, "ib", false, '12:54:24', false, "tomstring", "thomthom", "1", "2", "3", '2016-02-15', '23:14:24', '14:12:13','15:23:50','15:23:50',2);
        $actualReulst = $this->object->createAlarmReport($testAlarmReport);
        $this->assertEquals("Mike", $actualReulst->getName());
        
        
    }public function testCreateAlarmReportInstaller(){
        $testAlarmReport = new alarmReport("Thomas", 1000, "farum", 2200, "Farum", 22250898, '2016-02-15', '12:41:54', "zone 4", true, false, true, false, true, false, false, true, "ib", false, '12:54:24', false, "tomstring", "thomthom", "1", "2", "3", '2016-02-15', '23:14:24', '14:12:13','15:23:50','15:23:50',2);
        $actualReulst = $this->object->createAlarmReport($testAlarmReport);
        $this->assertEquals("Per", $actualReulst->getInstaller());
        
        
    }public function testCreateAlarmReportControlCenter(){
        $testAlarmReport = new alarmReport("Thomas", 1000, "farum", 2200, "Farum", 22250898, '2016-02-15', '12:41:54', "zone 4", true, false, true, false, true, false, false, true, "ib", false, '12:54:24', false, "tomstring", "thomthom", "1", "2", "3", '2016-02-15', '23:14:24', '14:12:13','15:23:50','15:23:50',2);
        $actualReulst = $this->object->createAlarmReport($testAlarmReport);
        $this->assertEquals("Gryphon Security Aps", $actualReulst->getControlCenter());
        
        
    }public function testCreateAlarmReportGuardRadioedDate(){
        $testDate = new DateTime('16-03-2016');
        $testAlarmReport = new alarmReport("Thomas", 1000, "farum", 2200, "Farum", 22250898, '2016-02-15', '12:41:54', "zone 4", true, false, true, false, true, false, false, true, "ib", false, '12:54:24', false, "tomstring", "thomthom", "1", "2", "3", '2016-02-15', '23:14:24', '14:12:13','15:23:50','15:23:50',2);
        $actualReulst = $this->object->createAlarmReport($testAlarmReport);
        $this->assertEquals($testDate, $actualReulst->getGuardRadioedDate());
        
        
    }public function testCreateAlarmReportGuardRadioedFrom(){
        $testTime = new DateTime('13:37:54');
        $testAlarmReport = new alarmReport("Thomas", 1000, "farum", 2200, "Farum", 22250898, '2016-02-15', '12:41:54', "zone 4", true, false, true, false, true, false, false, true, "ib", false, '12:54:24', false, "tomstring", "thomthom", "1", "2", "3", '2016-02-15', '23:14:24', '14:12:13','15:23:50','15:23:50',2);
        $actualReulst = $this->object->createAlarmReport($testAlarmReport);
        $this->assertEquals($testTime, $actualReulst->getGuardRadioedFrom());
        
        
    }public function testCreateAlarmReportGuardRadioedTo(){
        $testTime = new DateTime('14:56:32');
        $testAlarmReport = new alarmReport("Thomas", 1000, "farum", 2200, "Farum", 22250898, '2016-02-15', '12:41:54', "zone 4", true, false, true, false, true, false, false, true, "ib", false, '12:54:24', false, "tomstring", "thomthom", "1", "2", "3", '2016-02-15', '23:14:24', '14:12:13','15:23:50','15:23:50',2);
        $actualReulst = $this->object->createAlarmReport($testAlarmReport);
        $this->assertEquals($testTime, $actualReulst->getGuardRadioedTo());
        
        
    }public function testCreateAlarmReportArrivedAt(){
        $testTime = new DateTime('16:18:34');
        $testAlarmReport = new alarmReport("Thomas", 1000, "farum", 2200, "Farum", 22250898, '2016-02-15', '12:41:54', "zone 4", true, false, true, false, true, false, false, true, "ib", false, '12:54:24', false, "tomstring", "thomthom", "1", "2", "3", '2016-02-15', '23:14:24', '14:12:13','15:23:50','15:23:50',2);
        $actualReulst = $this->object->createAlarmReport($testAlarmReport);
        $this->assertEquals($testTime, $actualReulst->getArrivedAt());
        
        
    }public function testCreateAlarmReportDone(){
        $testTime = new DateTime('22:30:34');
        $testAlarmReport = new alarmReport("Thomas", 1000, "farum", 2200, "Farum", 22250898, '2016-02-15', '12:41:54', "zone 4", true, false, true, false, true, false, false, true, "ib", false, '12:54:24', false, "tomstring", "thomthom", "1", "2", "3", '2016-02-15', '23:14:24', '14:12:13','15:23:50','15:23:50',2);
        $actualReulst = $this->object->createAlarmReport($testAlarmReport);
        $this->assertEquals($testTime, $actualReulst->getDone());
        
        
    }
    public function testCreateAlarmReportUser(){
        $testUser = new Employee(1, "Thomas", "Kragsberger");
        $testAlarmReport = new alarmReport("Thomas", 1000, "farum", 2200, "Farum", 22250898, '2016-02-15', '12:41:54', "zone 4", true, false, true, false, true, false, false, true, "ib", false, '12:54:24', false, "tomstring", "thomthom", "1", "2", "3", '2016-02-15', '23:14:24', '14:12:13','15:23:50','15:23:50',2);
        $actualReulst = $this->object->createAlarmReport($testAlarmReport);
        $this->assertEquals($testUser->getEmployeeId(), $actualReulst->getEmployee()->getEmployeeId());
        
        
    }
    public function testCreateAlarmReportUserAndCustomerName(){
        $testUser = new Employee(1, "Thomas", "Kragsberger");
        $testAlarmReport = new alarmReport("Thomas", 1000, "farum", 2200, "Farum", 22250898, '2016-02-15', '12:41:54', "zone 4", true, false, true, false, true, false, false, true, "ib", false, '12:54:24', false, "tomstring", "thomthom", "1", "2", "3", '2016-02-15', '23:14:24', '14:12:13','15:23:50','15:23:50',2);
        $actualReulst = $this->object->createAlarmReport($testAlarmReport);
        $this->assertEquals($testUser->getEmployeeId(), $actualReulst->getEmployee()->getEmployeeId());
        $this->assertEquals($testAlarmReport->getCustomerName(), $actualReulst->getCustomerName());
        
        
    }
    
    
    
    
            
    /**
     * @covers dataSource::createAlarmReports
     * @todo   Implement testCreateAlarmReports().
     */
    public function testCreateAlarmReports() {
        // Remove the following lines when you implement this test.
       $testAlarmReport1 = new alarmReport("Thomas", 1000, "farum", 2200, "Farum", 22250898, '2016-02-15', '12:41:54', "zone 4", true, false, true, false, true, false, false, true, "ib", false, '12:54:24', false, "tomstring", "thomthom", "1", "2", "3", '2016-02-15', '23:14:24', '14:12:13','15:23:50','15:23:50',2);
       $testAlarmReport2 = new alarmReport("Mike", 1000, "farum", 2200, "Farum", 22250898, '2016-02-15', '12:41:54', "zone 4", true, false, true, false, true, false, false, true, "ib", false, '12:54:24', false, "tomstring", "thomthom", "1", "2", "3", '2016-02-15', '23:14:24', '14:12:13','15:23:50','15:23:50',2);
       $myArray = array($testAlarmReport1,$testAlarmReport2);
       $actualResult = $this->object->createAlarmReports($myArray);
       $this->assertEquals($myArray,$actualResult);
       
    }

    /**
     * @covers dataSource::getAddress
     * @todo   Implement testGetAddress().
     */
    public function testGetAddress() {
        // Remove the following lines when you implement this test.
        $testAddress = new address(1,"Alarmpanel stuen gammel bygning", 55.8117694, 12.373767000000043);
        $actualResult = $this->object->getAddress('10c5bf4758f64559d4c2ca6adcd8fd08');
        $this->assertEquals($testAddress->getAddressName(), $actualResult->getAddressName());
    }
    /**
     * @covers dataSource::createNFC
     * 
     */
    public function testCreateNFCFilled(){
        $testUser = new Employee(1, "Thomas", "Kragsberger");
        $testNFC['RangeCheck'] = TRUE;
        $testNFC['TagAddress'] = "Farum St.";
        $testNFC['Time'] = '16-03-2016';
        $testNFC['User'] = $testUser->getFirstname();
        $json_data = json_encode($testNFC);
        $data = json_decode($json_data);
                
            
        $actualResult = $this->object->createNFC($data);
        $this->assertEquals(TRUE, $actualResult);
    }
    public function testCreateNFCMissingAllRows(){
        $testUser = new Employee(null, null, null);
        $testNFC['RangeCheck'] = false;
        $testNFC['TagAddress'] =  "";
        $testNFC['Time'] = "";
        $testNFC['User'] = $testUser->getFirstname();
        $json_data = json_encode($testNFC);
        $data = json_decode($json_data);
                
            
        $actualResult = $this->object->createNFC($data);
        $this->assertNotEquals(TRUE, $actualResult);
        
    }
    public function testCreateNFCMissingUser(){
        $testUser = new Employee(null, null, null);
        $testNFC['RangeCheck'] = true;
        $testNFC['TagAddress'] =  "Skovbakkerne";
        $testNFC['Time'] = '16-03-2016';
        $testNFC['User'] = $testUser->getFirstname();
        $json_data = json_encode($testNFC);
        $data = json_decode($json_data);
                
            
        $actualResult = $this->object->createNFC($data);
        $this->assertNotEquals(TRUE, $actualResult);
        
    }public function testCreateNFCMissingRangeCheck(){
        $testUser = new Employee(1, "Mike", "Heerwagen");
        $testNFC['RangeCheck'] = null;
        $testNFC['TagAddress'] =  "Skovbakkerne";
        $testNFC['Time'] = '16-03-2016';
        $testNFC['User'] = $testUser->getFirstname();
        $json_data = json_encode($testNFC);
        $data = json_decode($json_data);
                
            
        $actualResult = $this->object->createNFC($data);
        $this->assertEquals(TRUE, $actualResult);
        
    }public function testCreateNFCMissingTagAddress(){
        $testUser = new Employee(1, "Mike", "Heerwagen");
        $testNFC['RangeCheck'] = true;
        $testNFC['TagAddress'] =  null;
        $testNFC['Time'] = '16-03-2016';
        $testNFC['User'] = $testUser->getFirstname();
        $json_data = json_encode($testNFC);
        $data = json_decode($json_data);
                
            
        $actualResult = $this->object->createNFC($data);
        $this->assertNotEquals(TRUE, $actualResult);
        
    }public function testCreateNFCMissingTime(){
        $testUser = new Employee(1, "Mike", "Heerwagen");
        $testNFC['RangeCheck'] = true;
        $testNFC['TagAddress'] =  "TronsgÃ¥rdsvej 42";
        $testNFC['Time'] = null;
        $testNFC['User'] = $testUser->getFirstname();
        $json_data = json_encode($testNFC);
        $data = json_decode($json_data);
                
            
        $actualResult = $this->object->createNFC($data);
        $this->assertEquals(TRUE, $actualResult);
        
    }public function testCreateNFCMissingEntireUser(){
        $testUser = new Employee(1, "Mike", "Heerwagen");
        $testNFC['RangeCheck'] = true;
        $testNFC['TagAddress'] =  "TronsgÃ¥rdsvej 42";
        $testNFC['Time'] = '16-06-2016';
        $testNFC['User'] = null;
        $json_data = json_encode($testNFC);
        $data = json_decode($json_data);
                
            
        $actualResult = $this->object->createNFC($data);
        $this->assertNotEquals(TRUE, $actualResult);
        
    }public function testCreateNFCMissingRangeCheckAndTagAddress(){
        $testUser = new Employee(1, "Mike", "Heerwagen");
        $testNFC['RangeCheck'] = null;
        $testNFC['TagAddress'] =  null;
        $testNFC['Time'] = '13-11-2014';
        $testNFC['User'] = $testUser->getFirstname();
        $json_data = json_encode($testNFC);
        $data = json_decode($json_data);
                
            
        $actualResult = $this->object->createNFC($data);
        $this->assertNotEquals(TRUE, $actualResult);
        
    }public function testCreateNFCMissingTimeAndRangeCheck(){
        $testUser = new Employee(1, "Mike", "Heerwagen");
        $testNFC['RangeCheck'] = null;
        $testNFC['TagAddress'] =  "SÃ¸borg Hovedgade";
        $testNFC['Time'] = null;
        $testNFC['User'] = $testUser->getFirstname();
        $json_data = json_encode($testNFC);
        $data = json_decode($json_data);
                
            
        $actualResult = $this->object->createNFC($data);
        $this->assertEquals(TRUE, $actualResult);
        
    }
    /**
     * @covers dataSource::createNFCs
     * 
     */
    public function testCreateNFCsFilled(){
        //First NFC object
        $testUser1 = new Employee(1, "Mike", "Heerwagen");
        $testNFC1['RangeCheck'] = true;
        $testNFC1['TagAddress'] =  "Kollegiebakken";
        $testNFC1['Time'] = '15-05-2016';
        $testNFC1['User'] = $testUser1->getFirstname();
        //second NFC object
        $testUser2 = new Employee(2, "Thomas", "Kragsberger");
        $testNFC2['RangeCheck'] = true;
        $testNFC2['TagAddress'] =  "Farum St";
        $testNFC2['Time'] = null;
        $testNFC2['User'] = $testUser2->getFirstname();
        $testArray = array($testNFC1, $testNFC2);
         $json_data = json_encode($testArray);
        $data = json_decode($json_data);
        $actualResult = $this->object->createNFCs($data);
        
        $this->assertEquals(true, $actualResult);
    }    public function testCreateNFCsWithErrorRangeCheckAndTagAddress(){
        //First NFC object
        $testUser1 = new Employee(1, "Mike", "Heerwagen");
        $testNFC1['RangeCheck'] = null;
        $testNFC1['TagAddress'] =  null;
        $testNFC1['Time'] = '15-05-2016';
        $testNFC1['User'] = $testUser1->getFirstname();
        //second NFC object
        $testUser2 = new Employee(2, "Thomas", "Kragsberger");
        $testNFC2['RangeCheck'] = true;
        $testNFC2['TagAddress'] =  "Farum St";
        $testNFC2['Time'] = null;
        $testNFC2['User'] = $testUser2->getFirstname();
        $testArray = array($testNFC1, $testNFC2);
         $json_data = json_encode($testArray);
        $data = json_decode($json_data);
        $actualResult = $this->object->createNFCs($data);
        
        $this->assertNotEquals(true, $actualResult);
    }   
    public function testCreateCustomerWithErrorCustomerName(){
        $testCustomer['CustomerName'] = null;
        $testCustomer['CustomerNumber'] =  123;
        $testCustomer['StreetHouseNumber'] = "hervej 100";
        $testCustomer['ZipCode'] = 4400;
        $testCustomer['City'] ="Lyngby";
        $testCustomer['Phonenumber']=12312312;
        $json_data = json_encode($testCustomer);
        $data = json_decode($json_data);
                
            
        $actualResult = $this->object->createCustomer($data);
        $this->assertNotEquals(TRUE, $actualResult);
    }
    
    public function testCustomersFilled(){
        
        //First customer
        $testCustomer['CustomerName'] = "Mogens";
        $testCustomer['CustomerNumber'] =  123;
        $testCustomer['StreetHouseNumber'] = "hervej 100";
        $testCustomer['ZipCode'] = 2800;
        $testCustomer['City'] ="Lyngby";
        $testCustomer['Phonenumber']=12312312;
        //second Customer
        $testCustomer2['CustomerName'] = "Ib";
        $testCustomer2['CustomerNumber'] =  1234;
        $testCustomer2['StreetHouseNumber'] = "hervej 10";
        $testCustomer2['ZipCode'] = 4400;
        $testCustomer2['City'] ="Kalundborg";
        $testCustomer2['Phonenumber']=45645645;
        $testArray = array($testCustomer,$testCustomer2);
        $json_data = json_encode($testArray);
        $data = json_decode($json_data);
        $actualResult = $this->object->createCustomers($data);
        $this->assertEquals(true, $actualResult);
    }
    
    

}
